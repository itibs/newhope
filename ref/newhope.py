# A New Hope - Post Quantum Key Exchange

# Python implementation
# Iorgulescu Tiberiu

import os
import hashlib
import sha3
import numpy

'''Constants'''
PARAM_N = 1024

PARAM_K = 16
PARAM_Q = 12289

PRINT_INFO = True

class Server:
    '''Alice - key exchange initiator'''

    def initialize(self):
        # generate seeds
        # seed = os.urandom(NEWHOPE_SEEDBYTES)
        # noise_seed = os.urandom(NEWHOPE_SEEDBYTES)

        # generate a
        a = self.gen_a()
        self.a = a
	
        if PRINT_INFO:
            print "[Alice] a = " + str(a)

        # generate s (secret)
        s = Polynomial()
        s.set_normal_coeff()
        self.s = s
        if PRINT_INFO:
            print "[Alice] s = " + str(s)

        # generate e (error)
        e = Polynomial()
        e.set_normal_coeff()
        self.e = e
        if PRINT_INFO:
            print "[Alice] e = " + str(e)

        # generate public
        b = a.pointwise_mult(s).add(e) # a .* s + e
        self.b = b
        if PRINT_INFO:
            print "[Alice] b = " + str(b)

    def gen_a(self):
        a = Polynomial()
        a.set_unif_coeff()

        return a

    def gen_symkey(self, u, r):
        # generate approx key
        vp = u.pointwise_mult(self.s)
        self.vp = vp
        if PRINT_INFO:
            print "[Alice] vp = " + str(vp)

        # correct errors
        niu = recover(vp, r)
        self.niu = niu
        if PRINT_INFO:
            print "[Alice] niu = " + str(niu)

class Client:
    '''Bob - key exchange partner'''

    def get_sk(self, a, b):
        res = []
        for i in xrange(PARAM_K + 1):
            ik = i + PARAM_Q - PARAM_K / 2
            for j in xrange(PARAM_K + 1):
                jk = j + PARAM_Q - PARAM_K / 2
                if ((a * ik) + jk) % PARAM_Q == b:
                    res.append(ik)
                    return ik

        if len(res) > 1:
            print res

        return -1

    def get_s(self, a, b):
        s_coeff = []
        for k in xrange(PARAM_N):
            ak = a.coeff[k]
            bk = b.coeff[k]
            s_coeff.append(self.get_sk(ak, bk))

        s = Polynomial()
        s.set_coeff(s_coeff)

        return s

    def hack(self):
        a_coeff = [int(x) for x insplit(" ")]
        a = Polynomial()
        a.set_coeff(a_coeff)
        b_coeff = [int(x) for x in "6899 12288 1862 8732 3937 3165 8645 7643 5257 872 2578 5883 937 12260 12291 6081 6911 1287 5654 1811 12293 12027 6225 12868 3478 12290 5298 6661 12287 8688 12292 2968 11293 5263 12290 4447 3251 12251 6005 12290 8675 5826 5959 10211 2866 5916 8058 11054 2280 12353 9783 3333 2935 9955 12291 12287 893 2549 8185 6056 5139 5122 7481 12290 1309 9561 6245 12294 3161 1368 1831 10555 3173 4289 10623 5344 10805 4747 5028 1665 10029 3701 8478 10528 2081 1520 7574 8325 7294 9711 4031 11156 8604 6841 12288 8126 1260 8215 2196 9870 10120 6618 7850 10201 2136 10492 2933 12096 5126 2500 10177 10144 11935 12291 3175 12563 11565 8583 4617 7239 8327 12877 4753 8961 6242 8492 1218 4819 6152 10735 8897 5504 12292 900 12287 5033 5228 7996 8938 2219 4826 12291 8833 10797 4648 12292 5460 5944 12290 12600 1442 8720 1618 11139 6762 5636 8631 7740 7168 6760 12293 12287 2941 5598 12769 12291 7691 11042 3219 10295 12213 6300 12635 11616 9130 12691 11115 11666 7625 1515 12289 2504 12289 10907 6592 1766 4940 11881 12288 10905 4797 9159 2004 12068 9746 3045 7807 10584 1724 12288 5400 10407 8346 11296 4134 2389 1007 1929 1282 10317 2219 11531 12849 12295 6715 12296 6356 1423 11767 2361 9644 11519 6617 11505 5367 11222 3700 2745 9711 6468 12501 12287 11951 4917 10748 4194 8147 4483 9528 12283 12598 12287 7563 4942 7326 12286 12293 7653 2129 9476 12291 4514 1651 3525 5506 4766 2061 8441 8128 5112 2828 12287 4906 5938 3453 12422 11339 2627 2511 881 7895 6172 2357 5112 12288 4340 10321 9528 4283 7702 6594 11834 9222 12250 12290 6814 1359 3474 12290 9290 3771 9031 4408 6279 12762 3240 12293 10808 12288 5916 5573 6104 8994 11672 3181 12293 13107 4153 9516 12291 3691 12290 6156 3855 6284 10450 6338 8855 9090 6633 12293 6152 12288 12283 922 8300 11183 9671 10566 7052 10359 12292 3501 6988 5645 12294 12288 12292 12675 10559 9407 1325 9575 3848 6614 9789 12286 12628 11058 4746 4928 2977 3852 7208 12288 2611 12748 10205 12294 6910 4467 3377 6017 1111 4470 8398 11527 9499 4939 11932 927 7077 12287 8525 4784 12288 7397 1832 12674 11363 12792 11768 12288 12287 12289 11155 9645 3750 10736 3368 4600 8597 12289 6886 3016 2402 12080 820 2112 9016 6334 1926 2017 9683 12290 12289 3405 11449 5649 5394 7163 12288 11180 7274 6151 5555 9892 4040 1371 9843 3486 7335 2784 4782 12743 6630 2176 1095 1812 4846 7541 12288 12291 6172 4383 6562 12006 4029 2125 2389 11201 6202 12288 8991 3986 1351 8436 12988 7773 9589 10728 1305 925 11147 12286 2217 3880 2860 3709 1980 6176 1398 4837 8352 4356 5176 9567 10462 3684 8206 10468 11032 6932 10549 4453 11315 12286 11325 12289 12287 7429 9004 2049 4999 6968 3356 8030 6969 10498 10516 12292 985 1617 12290 1417 6756 5581 7150 1395 12288 12291 7458 12661 1851 12287 6454 3914 11493 10258 12284 10514 11694 3213 6591 7041 10696 12281 12293 2140 968 7420 12291 2495 8929 2588 9455 4407 8499 12287 11342 1841 11035 8465 5133 12483 3364 8108 10354 10549 6297 10761 9011 2950 5423 12561 1432 1129 11304 12285 1013 4308 981 12286 5565 6143 1412 12282 1398 6590 9721 11663 2195 12295 2195 4307 11704 4150 11339 8808 12286 3226 12295 3575 10105 12287 5514 12290 4278 12458 9882 6516 2306 6420 11233 7956 12287 12745 4684 1032 10404 12292 8607 2225 10741 4459 9648 12553 7984 13042 9837 12580 12290 3640 9733 1635 1980 12286 6972 4333 12285 12289 1442 5361 10183 2620 4532 8833 8694 10393 12438 12287 8799 11968 5054 7156 7990 12285 11325 7974 11102 2078 7968 10334 3463 2387 8681 12374 12289 11272 10108 10734 12290 11679 12286 10202 1537 1621 7964 5181 10156 8388 7767 9154 9723 6629 2827 5060 9427 8061 12294 12289 2317 11417 12290 9685 8893 1295 8071 4299 6443 10952 3012 1962 7589 1239 11936 3950 3473 4292 9412 10977 2088 2874 12288 7177 4919 4627 3392 12958 12287 12497 10704 2741 6252 6137 11366 12833 3048 3394 8072 12288 3793 976 909 10914 6357 12957 9664 8047 9600 11550 6169 10488 12691 1852 10017 9289 12244 12291 1657 12210 3273 4554 1383 5251 7643 8199 12290 6142 12286 12630 12481 12286 4384 1651 9736 5217 1995 8386 10485 12291 7705 12286 12290 4457 937 4721 4541 5309 1054 3997 10274 2238 7164 11045 12017 12290 3967 2619 6417 11187 11691 4971 3648 12293 2204 12804 12382 5028 12285 3196 1867 7527 12292 3875 4849 6761 6429 2346 12289 4464 1752 12319 6172 11631 13072 3932 6506 11017 6871 963 6410 1274 7568 6343 3535 6277 5188 4803 988 12289 7700 1433 12288 8633 10113 10217 4450 4293 5512 9144 12293 4387 6807 5900 10602 12286 12292 1711 7214 2961 6654 12453 12285 7046 12290 6565 6853 12728 1539 6280 12286 8084 1225 1515 12286 12286 11637 11128 9399 1443 9679 12287 11985 9252 1771 6911 9597 9791 10004 7603 10398 2776 12284 12000 2587 10548 12289 12288 13065 4876 1622 2763 3181 3393 9588 3234 2738 1566 7258 12288 1236 12333 8832 12292 11133 4346 9017 12091 11907 12706 9955 4431 10856 5578 2385 7281 4172 9033 8119 11441 3280 9846 12290 12294 9791 7307 12289 12291 12291 12514 7812 6110 4622 12285 5955 1711 12621 8934 12845 4472 3051 1387 6635 2547 7826 10539 4703 3571 12705 12288 3751 9927 12286 4603 3057 7308 12290 12287 2866 12283 8539 9632 3650 2362 10156 11010 5061 10797 6531 1125 6909 7378 12290 2028 2473 4490 11802 12293 12906 3447 11172 4142 1094 1133 7946 1067 4401 10927 4248 12291 3939 1655 11116 1912 5920 7185 2388 8906 11439 2335 3402 10398 979 1369 3272 6584 12289 10228 1801 11681 6941 9961 6577 7643 4002 12289 9194 7957 9083 11023 9532 7445 1240 9624 887 8006 1317 9993 3100 12508 9627 12290 12288 10816 3310 4015 4492 12292 11662 9206 12617 7102 1641 12283 4147 12285 7593 12680 10375 8122 11029 6034 11079".split(" ")]
        b = Polynomial()
        b.set_coeff(b_coeff)
        my_s = self.get_s(a, b)
	o_s_coeff = [int(x) for x in "12293 12289 12285 12290 12288 12284 12287 12287 12292 12286 12291 12288 12290 12286 12289 12285 12291 12294 12292 12290 12289 12287 12284 12288 12291 12289 12286 12294 12289 12291 12289 12293 12286 12287 12289 12293 12293 12288 12287 12289 12296 12287 12290 12287 12288 12291 12292 12285 12294 12292 12287 12290 12290 12285 12289 12289 12287 12288 12284 12293 12286 12290 12291 12289 12293 12288 12290 12289 12290 12292 12294 12284 12292 12290 12284 12287 12291 12295 12293 12290 12291 12293 12286 12290 12292 12293 12287 12290 12284 12288 12290 12288 12291 12291 12289 12290 12286 12290 12292 12291 12287 12288 12291 12287 12290 12288 12291 12291 12287 12287 12287 12290 12292 12289 12285 12292 12290 12287 12287 12290 12291 12293 12286 12284 12290 12293 12291 12287 12293 12288 12284 12284 12289 12294 12289 12292 12294 12294 12295 12290 12291 12289 12290 12291 12290 12289 12284 12286 12289 12287 12286 12291 12293 12288 12288 12288 12290 12291 12287 12283 12289 12289 12287 12286 12288 12289 12293 12288 12285 12292 12290 12292 12288 12286 12286 12291 12292 12285 12288 12288 12289 12294 12289 12290 12288 12286 12290 12290 12289 12283 12290 12286 12292 12291 12291 12287 12287 12278 12294 12289 12291 12290 12291 12288 12283 12287 12290 12290 12295 12288 12286 12292 12286 12289 12287 12289 12291 12288 12287 12293 12288 12293 12293 12292 12292 12286 12292 12290 12287 12293 12291 12289 12291 12286 12293 12292 12285 12290 12287 12289 12291 12289 12285 12291 12294 12289 12289 12292 12283 12291 12289 12287 12291 12291 12292 12291 12290 12295 12292 12291 12295 12289 12281 12290 12288 12294 12287 12287 12290 12288 12291 12290 12290 12288 12289 12294 12291 12285 12292 12291 12291 12285 12291 12284 12289 12288 12286 12286 12289 12292 12287 12287 12287 12290 12288 12287 12289 12282 12289 12288 12291 12292 12290 12288 12290 12289 12288 12287 12292 12289 12286 12289 12286 12290 12286 12292 12284 12290 12290 12282 12289 12288 12289 12289 12292 12283 12290 12283 12285 12285 12290 12289 12287 12290 12291 12289 12289 12289 12291 12291 12287 12291 12287 12292 12288 12287 12289 12288 12285 12287 12287 12293 12288 12294 12289 12286 12290 12287 12289 12286 12285 12285 12288 12287 12291 12292 12290 12285 12294 12293 12291 12288 12289 12293 12285 12289 12287 12286 12292 12286 12284 12291 12289 12289 12289 12292 12286 12287 12285 12285 12293 12294 12289 12290 12290 12284 12288 12293 12290 12287 12290 12293 12292 12293 12289 12289 12295 12287 12290 12291 12291 12289 12290 12287 12292 12293 12287 12293 12286 12287 12285 12291 12292 12284 12290 12286 12290 12291 12291 12294 12285 12289 12289 12293 12286 12290 12291 12288 12291 12292 12290 12286 12289 12287 12283 12292 12285 12292 12287 12292 12291 12291 12285 12284 12289 12291 12290 12287 12290 12288 12292 12286 12285 12295 12284 12287 12287 12286 12287 12288 12290 12291 12293 12290 12290 12288 12289 12290 12289 12289 12285 12290 12288 12287 12293 12288 12290 12286 12288 12286 12289 12291 12288 12289 12290 12290 12294 12288 12288 12289 12289 12290 12290 12286 12289 12291 12287 12288 12286 12289 12286 12292 12285 12287 12290 12285 12288 12289 12287 12286 12290 12289 12285 12286 12291 12288 12290 12290 12289 12291 12290 12290 12287 12292 12291 12290 12287 12291 12291 12294 12290 12291 12286 12283 12288 12295 12291 12294 12289 12290 12286 12294 12289 12290 12286 12284 12289 12288 12287 12291 12288 12284 12289 12288 12286 12292 12287 12290 12287 12289 12287 12289 12290 12288 12289 12291 12289 12287 12286 12288 12285 12290 12290 12285 12292 12289 12298 12287 12290 12294 12289 12285 12290 12287 12287 12291 12288 12292 12284 12292 12291 12289 12288 12286 12290 12288 12289 12294 12285 12289 12289 12294 12298 12293 12287 12287 12293 12286 12292 12294 12289 12293 12284 12287 12285 12291 12289 12290 12286 12294 12291 12292 12290 12285 12292 12293 12285 12289 12291 12287 12293 12289 12290 12289 12286 12290 12291 12290 12290 12293 12287 12293 12292 12284 12288 12291 12295 12288 12286 12289 12289 12287 12288 12289 12291 12287 12297 12293 12288 12290 12291 12287 12285 12288 12282 12284 12293 12292 12290 12292 12292 12291 12283 12289 12291 12288 12283 12287 12290 12289 12292 12287 12294 12286 12293 12290 12284 12295 12286 12288 12289 12292 12292 12288 12286 12287 12292 12290 12288 12284 12294 12293 12291 12290 12292 12292 12293 12290 12289 12293 12294 12293 12294 12290 12288 12288 12283 12289 12287 12289 12288 12290 12289 12293 12288 12287 12290 12292 12284 12286 12289 12284 12289 12289 12290 12288 12292 12284 12287 12287 12288 12288 12283 12285 12290 12288 12289 12291 12293 12285 12288 12285 12288 12293 12289 12286 12288 12283 12284 12289 12287 12290 12290 12289 12294 12287 12290 12290 12286 12289 12288 12288 12286 12287 12283 12288 12287 12292 12288 12288 12287 12293 12291 12293 12288 12288 12291 12290 12290 12295 12289 12285 12287 12289 12290 12287 12288 12293 12288 12291 12288 12289 12290 12290 12295 12291 12289 12289 12287 12286 12288 12288 12293 12289 12285 12289 12292 12291 12290 12290 12287 12289 12292 12291 12285 12289 12289 12291 12286 12291 12287 12290 12289 12290 12288 12284 12293 12287 12287 12288 12286 12283 12295 12289 12291 12292 12287 12289 12289 12284 12294 12290 12291 12291 12290 12290 12294 12288 12290 12288 12289 12290 12292 12290 12289 12284 12287 12284 12285 12292 12291 12283 12295 12287 12294 12284 12288 12291 12290 12288 12287 12296 12286 12289 12289 12293 12286 12289 12289 12289 12295 12288 12290 12292 12289 12285 12288 12293 12293 12292 12292 12292 12296 12291 12287 12292 12292 12290 12291 12285 12289 12290 12290 12289 12291 12288 12294 12289 12289 12293 12289 12287 12287 12292 12288 12297 12288 12287 12294 12293 12290 12291 12295 12289 12288 12286 12287 12287 12289 12294 12286 12286 12290 12288 12295 12287 12290 12288 12291 12292 12289 12288 12288 12288 12287 12288 12287 12291 12285 12291 12293 12288 12286 12288 12283 12294 12290 12289 12290 12291 12286 12288 12292 12288 12288 12291 12289 12288 12292 12290 12290 12288 12287 12284 12283 12292 12284 12290 12292 12293 12293 12291 12289 12289 12292 12288 12290 12292 12289 12287 12288 12290 12288 12288 12289 12292 12289 12295 12288 12288 12284 12287 12290 12292".split(" ")]
	cnt_good = 0
	cnt_bad = 0
	for i in xrange(len(o_s_coeff)):
		if o_s_coeff[i] == my_s.coeff[i]:
			cnt_good += 1
		else:
			cnt_bad += 1
	print "good: " + str(cnt_good)
	print "bad: " + str(cnt_bad)

    def respond(self, a, b):
        self.s = self.get_s(a, b)
        # generate s'
        sp = Polynomial()
        sp.set_normal_coeff()
        self.sp = sp
        if PRINT_INFO:
            print "[Bob] sp = " + str(sp)

        # generate e'
        ep = Polynomial()
        ep.set_normal_coeff()
        self.ep = ep
        if PRINT_INFO:
            print "[Bob] ep = " + str(ep)

        # generate e''
        epp = Polynomial()
        epp.set_normal_coeff()
        self.epp = epp
        if PRINT_INFO:
            print "[Bob] epp = " + str(epp)

        # generate u
        u = a.pointwise_mult(sp).add(ep)
        v = b.pointwise_mult(sp).add(epp)
        self.u = u
        self.v = v
        if PRINT_INFO:
            print "[Bob] u = " + str(u)
            print "[Bob] v = " + str(v)

        # recovery helper
        r = self.get_rec(v)
        self.r = r
        if PRINT_INFO:
            print "[Bob] r = " + str(r)

        # get symmetric key
        niu = recover(v, r)
        self.niu = niu
        if PRINT_INFO:
            print "[Bob] niu = " + str(niu)

    def get_rec(self, v):
        '''obtains reconciliation vector'''

        rec_coeff = [0] * 1024
        for i in xrange(PARAM_N / 4):
            # get a random bit
            rbit = numpy.random.randint(0, 2)
            k = 0
            v0 = [0] * 4
            v1 = [0] * 4
            for j in xrange(4): # for each dimension
                xj = v.coeff[PARAM_N / 4 * j + i]
                # get the two possible locations
                v0[j], v1[j], kj = self.get_v0_v1(xj, rbit)
                k += kj

            r = [0] * 4
            # and choose right location based on k (norm)
            if k < 1:
                k = 0
                r = v0
            else:
                k = 1
                r = v1

            r[0] -= r[3]
            r[1] -= r[3]
            r[2] -= r[3]
            r[3] = -k + 2 * r[3]

            for j in xrange(4):
                rec_coeff[PARAM_N / 4 * j + i] = r[j] % 4

        rec = Polynomial()
        rec.set_coeff(rec_coeff)
        return rec

    def get_v0_v1(self, x, rbit):
        '''helper function for get_rec()'''
        # 4 is discretization size for one dimension of a Voronoi cell
        x = 4 * (x + rbit / 2.0) / PARAM_Q
        v0 = round(x)
        v1 = round(x - 1 / 2.0)
        return v0, v1, abs(x - v0)

    def gen_symkey(self, u, r):
        # generate approx key
        vp = u.pointwise_mult(self.s)
        self.vp = vp
        if PRINT_INFO:
            print "[Alice] vp = " + str(vp)

        # correct errors
        niu = recover(vp, r)
        self.niu = niu
        if PRINT_INFO:
            print "[Alice] niu = " + str(niu)

def recover(v, r):
    key = []
    for i in xrange(PARAM_N / 4):
        x = [0] * 4
        for j in xrange(4):
            x[j] = v.coeff[PARAM_N / 4 * j + i] * 1.0 / PARAM_Q
            Bj = 1.0
            if j == 4:
                Bj = 1.0 / 2
            x[j] += r.coeff[PARAM_N / 4 * j + i] * Bj / 4

        key.append(str(decode(x)))

    return ''.join(key)

def decode(x):
    v = [0] * 4
    for j in xrange(4):
        v[j] = x[j] - round(x[j])

    # k = manhattan norm of x
    k = 0
    for j in xrange(4):
        k += abs(v[j])

    if k <= 1:
        return 0

    return 1

class Polynomial:
    '''Represents a polynom in Zq[X]'''

    def __init__(self):
        '''initializes empty polynomial'''
        self.coeff = []

    def set_coeff(self, coeff):
        self.coeff = coeff

    def set_unif_coeff(self):
        self.coeff = numpy.random.random_integers(0, PARAM_Q, PARAM_N)

    def set_normal_coeff(self):
        self.coeff = numpy.random.binomial(PARAM_K, 0.5, PARAM_N)
        for i in xrange(PARAM_N):
            self.coeff[i] += PARAM_Q - PARAM_K / 2

    def pointwise_mult(self, p):
        res = Polynomial()
        for i in xrange(len(p.coeff)):
            x = self.coeff[i]
            y = p.coeff[i]
            res.coeff.append((x * y) % PARAM_Q)

        return res

    def add(self, p):
        res = Polynomial()
        for i in xrange(len(p.coeff)):
            x = self.coeff[i]
            y = p.coeff[i]
            res.coeff.append((x + y) % PARAM_Q)

        return res

    def make_modulo_q(self):
        for i in xrange(len(self.coeff)):
            self.coeff[i] = self.coeff[i] % PARAM_Q

    def __str__(self):
        if len(self.coeff) > 50:
            return str(self.coeff[:50]) + " [...] " + str(self.coeff[-50:])

        return str(self.coeff)

def main():
    cnt_fail = 0
    n_iter = 100
    if PRINT_INFO:
        n_iter = 1
    for i in xrange(n_iter):
        alice = Server()
        bob = Client()

        alice.initialize()
        bob.respond(alice.a, alice.b)
        alice.gen_symkey(bob.u, bob.r)
        # bob.gen_symkey(bob.u, bob.r)
        bob.hack()

        if bob.niu == alice.niu:
            print "SUCCESS - keys are identical"
        else:
            binstr = [i for i in xrange(len(bob.niu)) if bob.niu[i] != alice.niu[i]]
            print "FAIL - " + str(len(binstr)) + " bits differ"
            cnt_fail += 1

    print "Fail rate: " + str(cnt_fail * 100.0 / n_iter) + "%"

if __name__ == "__main__":
    main()
